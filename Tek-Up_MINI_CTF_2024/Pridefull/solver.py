from libnum import nroot
from Crypto.Util.number import *

Public_Key = [678343465803570450931005647039003192266563839717311574739907427418292332830702676171894825292302585092084091805881175398722585842081022059251067625013492560791802512662391762465444832978582215464463525050868440980418726771245572036596150388887273100107549775463379039311017261965789387111285870071730827705549, 65537]
CipherText = '2b78e4be0b55afd2b866a40a6eb44df1b9c59b749676d770c226157ff1cc3ec35ff16c03eda98e2aed7fda09e0c5cbde592ef7e694a25c3e54ed3a74a1d54121385e2766e4026f5c41b57ebeaba86c7c7a3a1265bc2cbd85ccbaead093a16b03e32e4f7e6d67c203301e73c623a4ff481013affdc6d2a8c25927905d09670552c'

N = Public_Key[0]
e = Public_Key[1]

ciphertext = int(CipherText,16)

P0 = nroot(N,2)

LP = list(range(P0, P0-10000, -1))


for i in LP:
    if((N%i)==0 and isPrime(i)):
        print('Q = ', i)
        Q = i
        P = N//Q
        break


d = inverse(e, (P-1) * (Q-1))
plaintext = long_to_bytes(pow(ciphertext, d, N))
print(plaintext)
